// https://github.com/Quick/Quick

import Quick
import Nimble
import SCPKIHelper
@testable import SCKeychainManager

class SCKeychainManagerSpec: QuickSpec {
    
    override func spec() {
        describe("SCKeychainManager") {
            context("can be used with default parameters") {
                let manager = SCKeychainManager.standard
                it("must be non-nil") {
                    expect(manager).notTo(beNil())
                }
                
                it("must have the main bundle identifier as serviceName") {
                    expect(manager.serviceName).to(be(Bundle.main.bundleIdentifier))
                }
                
                it("can set multiple items at once") {
                    try! manager.securely() //unlock is required and no iCloud sync
                        .set("eaceto", forKey: "username")
                        .set("my-secret-password", forKey: "password")
                        .set(true, forKey: "validated")
                        .apply()
                }
                
                it ("can get items") {
                    try! manager.securely().set("eaceto", forKey: "username").apply()
                    
                    let username = manager.string(forKey: "username")
                    expect("eaceto").to(be(username))
                }
                
                it("can remove them") {
                    try! manager.securely()
                        .set("my-secret-password", forKey: "password")
                        .set(true, forKey: "validated")
                        .set(0, forKey: "userId")
                        .apply()
                    
                    var password = manager.string(forKey: "password")
                    var validated = manager.bool(forKey: "validated")
                    var userId = manager.integer(forKey: "userId")
                    
                    expect(password).to(equal("my-secret-password"))
                    expect(validated).to(equal(true))
                    expect(userId).to(equal(0))
                    
                    try! manager.securely()
                        .removeObject(forKey: "password")
                        .removeObject(forKey: "validated")
                        .removeObject(forKey: "userId")
                        .apply()
                    
                    
                    password = manager.string(forKey: "password")
                    validated = manager.bool(forKey: "validated")
                    userId = manager.integer(forKey: "userId")
                    
                    expect(password).to(beNil())
                    expect(validated).to(beNil())
                    expect(userId).to(beNil())
                }
                
                it("can get a RSA Public Key generated by SCPKIHelper") {
                    waitUntil(timeout: 30) { done in
                        let identifier = "test_public_key_1"
                        
                        SCPKIHelper.shared.generateKeyPair(with: SCPKIKeySpec.common, identifiedBy: identifier) { publicKey, _ , error in
                            
                            expect(publicKey).toNot(beNil())
                            expect(error).to(beNil())
                         
                            let publicKey2 = manager.rsaPublicKey(identifiedBy: identifier)
                            expect(publicKey2).notTo(beNil())
                            
                            if let pub1 = publicKey, let pub2 = publicKey2 {
                                if #available(iOS 10.0, *) {
                                    let pub1Attributes = SecKeyCopyAttributes(pub1) as! [String: Any]
                                    let pub2Attributes = SecKeyCopyAttributes(pub2) as! [String: Any]
                                
                                    // is RSA?
                                    let type1 = Int(pub1Attributes[kSecAttrKeyType as String] as! String)
                                    let type2 = Int(pub2Attributes[kSecAttrKeyType as String] as! String)
                                    let rsaType = Int(kSecAttrKeyTypeRSA as String)
                                    
                                    expect(type1).notTo(beNil())
                                    expect(type1).to(equal(rsaType))
                                    expect(type2).notTo(beNil())
                                    expect(type1).to(equal(type2))
                                    
                                    // Check that this is really a public key
                                    let keyType1 = Int(pub1Attributes[kSecAttrKeyClass as String] as! String)
                                    let keyType2 = Int(pub2Attributes[kSecAttrKeyClass as String] as! String)
                                    let pubKeyType = Int(kSecAttrKeyClassPublic as String)
                                    
                                    expect(keyType1).notTo(beNil())
                                    expect(keyType1).to(equal(pubKeyType))
                                    expect(keyType2).notTo(beNil())
                                    expect(keyType1).to(equal(keyType2))
                                    
                                    let keySize1 = pub1Attributes[kSecAttrKeySizeInBits as String] as! Int
                                    let keySize2 = pub1Attributes[kSecAttrKeySizeInBits as String] as! Int
                                    expect(keySize1).notTo(beNil())
                                    expect(keySize1).to(equal(4096))
                                    expect(keySize2).to(equal(4096))
                                }
                            }
                            
                            done()
                        }
                    }
                }
            }
        }
    }
    
    func generateRSAKeyPair(with identifier : String, _ completion : @escaping (_ created : Bool) -> Void) {
        let tag = "\(Bundle.main.bundleIdentifier ?? "").\(identifier)"
        let privateKeySpec: [CFString : Any] = [
            kSecAttrIsPermanent: true,
            kSecAttrApplicationTag: tag
        ]
        
        let publicKeyParams: [CFString : Any] = [
            kSecAttrIsPermanent: true,
            kSecAttrApplicationTag: tag
        ]
        
        let keyPairParams: [CFString: Any] = [
            kSecPublicKeyAttrs: publicKeyParams,
            kSecPrivateKeyAttrs: privateKeySpec,
            kSecAttrKeyType: kSecAttrKeyTypeRSA,
            kSecAttrKeySizeInBits: 4096,
        ]
        
        // private / public key generation takes a lot of time, so this operation must be perform in another thread.
        DispatchQueue.global().async {
            var publicKey : SecKey?
            var privateKey : SecKey?
            
            let status = SecKeyGeneratePair(keyPairParams as CFDictionary, &publicKey, &privateKey)
            
            if status != errSecSuccess {
                DispatchQueue.main.async {
                    completion(false)
                }
                return
            }
            
            DispatchQueue.main.async {
                completion(true)
            }
        }
    }
}
